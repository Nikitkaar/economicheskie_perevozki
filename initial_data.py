import logging
import math
import re
from docx import Document


class WordEquationReplacer:
    def __init__(self, file_path, **kwargs):
        self.doc = Document(file_path)
        self.replacements = kwargs
        logging.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WordEquationReplacer: {self.replacements}")

    import re

    def replace_text_in_paragraph(self, p):
        #–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.#
        for old, new in self.replacements.items():
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
            sanitized_old = re.escape(old)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º re.sub –¥–ª—è –∑–∞–º–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            # –ó–¥–µ—Å—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ –∏ —Ç–æ—á–∫–∏
            pattern = re.compile(rf'\b{sanitized_old}\b')  # –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞

            # –û–±—Ä–∞–±–æ—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
            if pattern.search(p.text):
                for run in p.runs:
                    if pattern.search(run.text):
                        old_text = run.text
                        run.text = pattern.sub(new, run.text)
                        logging.debug(f"–ó–∞–º–µ–Ω–µ–Ω–æ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ: '{old}' –Ω–∞ '{new}' –≤ —Ç–µ–∫—Å—Ç–µ '{old_text}'")
            else:
                logging.debug(f"'{old}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ: '{p.text}'")

    def replace_text_in_cell(self, cell):
        #–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ.#
        for paragraph in cell.paragraphs:
            self.replace_text_in_paragraph(paragraph)

    def process_document(self):
        #–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ç–∞–±–ª–∏—Ü—ã.#
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞—á–∞—Ç–∞.")

        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
        for p in self.doc.paragraphs:
            logging.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ: '{p.text}'")
            self.replace_text_in_paragraph(p)

        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in self.doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    logging.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è—á–µ–π–∫—É: '{cell.text}'")
                    self.replace_text_in_cell(cell)

        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def save_document(self, new_file_path):
        #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª.
        self.doc.save(new_file_path)
        logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {new_file_path}")


class Counter:
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞—Ö
    locomotives_data = {
        "–í–õ60": {
            "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å": 120,
            "–†–∞–¥–∏—É—Å –∫–æ–ª–µ—Å–∞": 625,
            "–ß–∏—Å–ª–æ –æ—Å–µ–π": 3,
            "–î–ª–∏–Ω–∞ –∂–µ—Å—Ç–∫–æ–π –±–∞–∑—ã": 4600,
            "–ü–æ–ø–µ—Ä–µ—á–Ω—ã–µ —Ä–∞–∑–±–µ–≥–∏": {"–∫—Ä–∞–π–Ω–∏—Ö": 1.0, "—Å—Ä–µ–¥–Ω–µ–π —É —Ç—Ä–µ—Ö–æ—Å–Ω–æ–π —Ç–µ–ª–µ–∂–∫–∏": 15.5}
        },
        "–í–õ60–∫": {
            "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å": 100,
            "–†–∞–¥–∏—É—Å –∫–æ–ª–µ—Å–∞": 625,
            "–ß–∏—Å–ª–æ –æ—Å–µ–π": 3,
            "–î–ª–∏–Ω–∞ –∂–µ—Å—Ç–∫–æ–π –±–∞–∑—ã": 4600,
            "–ü–æ–ø–µ—Ä–µ—á–Ω—ã–µ —Ä–∞–∑–±–µ–≥–∏": {"–∫—Ä–∞–π–Ω–∏—Ö": 1.0, "—Å—Ä–µ–¥–Ω–µ–π —É —Ç—Ä–µ—Ö–æ—Å–Ω–æ–π —Ç–µ–ª–µ–∂–∫–∏": 15.5},
        },
        "–ß–°4—Ç": {
                "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å": 160,
                "–†–∞–¥–∏—É—Å –∫–æ–ª–µ—Å–∞": 625,
                "–ß–∏—Å–ª–æ –æ—Å–µ–π": 3,
                "–î–ª–∏–Ω–∞ –∂–µ—Å—Ç–∫–æ–π –±–∞–∑—ã": 4600,
                "–ü–æ–ø–µ—Ä–µ—á–Ω—ã–µ —Ä–∞–∑–±–µ–≥–∏": {"–∫—Ä–∞–π–Ω–∏—Ö": 1.3, "—Å—Ä–µ–¥–Ω–µ–π —É —Ç—Ä–µ—Ö–æ—Å–Ω–æ–π —Ç–µ–ª–µ–∂–∫–∏": 1.3}
                # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–æ–∫–æ–º–æ—Ç–∏–≤—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        }}

    def __init__(self, **kwargs):
        self.Loc = kwargs.get("Loc")
        self.VGruz = kwargs.get("VGruz")
        self.VEmpty = kwargs.get("VEmpty")
        self.rail = kwargs.get("rail")
        self.iznos = kwargs.get("iznos")
        self.shpali = kwargs.get("shpali")
        self.screpleniya = kwargs.get("screpleniya")
        self.rezina = kwargs.get("rezina")
        self.ballast = kwargs.get("ballast")
        self.circle_moment = kwargs.get("circle_moment")
        self.sdvijka = kwargs.get("sdvijka")
        self.R = kwargs.get("R") * 1000
        self.ugolPovorotaNAcurve = kwargs.get("ugolPovorotaNAcurve")
        self.VpryamoNAPerevode = kwargs.get("VpryamoNAPerevode")
        self.VbokovoyNAPerevode = kwargs.get("VbokovoyNAPerevode")
        self.jo = kwargs.get("jo")
        self.Œ≥o = kwargs.get("Œ≥o")
        self.¬µ = kwargs.get("¬µ")
        self.ùúÇ1 = Counter.locomotives_data[f"{self.Loc}"]["–ü–æ–ø–µ—Ä–µ—á–Ω—ã–µ —Ä–∞–∑–±–µ–≥–∏"]["–∫—Ä–∞–π–Ω–∏—Ö"]
        self.ùúÇ2 = Counter.locomotives_data[f"{self.Loc}"]["–ü–æ–ø–µ—Ä–µ—á–Ω—ã–µ —Ä–∞–∑–±–µ–≥–∏"]["–∫—Ä–∞–π–Ω–∏—Ö"]
        self.Œª = Counter.locomotives_data[f"{self.Loc}"]["–î–ª–∏–Ω–∞ –∂–µ—Å—Ç–∫–æ–π –±–∞–∑—ã"]
        self.L = Counter.locomotives_data[f"{self.Loc}"]["–î–ª–∏–Ω–∞ –∂–µ—Å—Ç–∫–æ–π –±–∞–∑—ã"]
        self.r = Counter.locomotives_data[f"{self.Loc}"]["–†–∞–¥–∏—É—Å –∫–æ–ª–µ—Å–∞"]

        self.qmax = 1509
        self.œÑ = 70  # —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —Ä–∞–±–æ—á–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≥—Ä–µ–±–Ω—è –∫–æ–ª–µ—Å–∞ –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É, —Ä–∞–≤–Ω—ã–π –¥–ª—è –ª–æ–∫–æ–º–æ—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–¥–∞–∂–µ–π ‚Äì 70¬∞; self.r
        self.t = 13
        self.S = 1520

        self.b = round((self.L * (self.r + self.t) * math.tan(math.radians(self.œÑ))) / (
                self.R + (self.S / 2) - (self.r + self.t) * math.tan(math.radians(self.œÑ))),2)
        self.fh = round(((self.L + self.b) ** 2) / (2 * self.R),2)
        self.Sopt = round(self.qmax + self.fh - self.ùúÇ1 + 4,2)
        self.bb = round((self.L * self.r * math.tan(math.radians(self.œÑ))) / (2 * self.R),2)
        self.fhh = round(((self.L + 2 * self.bb) ** 2) / (8 * self.R),2)
        self.fv = round(((self.L - 2 * self.bb) ** 2) / (8 * self.R),2)
        self.Œ¥_min = 7
        self.Smin = round(self.qmax + self.fh - self.fv + (self.Œ¥_min / 2) + 4,2)

